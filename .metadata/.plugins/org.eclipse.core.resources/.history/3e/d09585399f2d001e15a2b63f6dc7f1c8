/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

// RCC   0x40023800
// Offset RCC = 0x30
// Mask = 0x00000010

// GPIOA = 0x40020000
// MODER = 0x00
// ODR   = 0x14

#include <stdint.h>

// Punteros a los registros de control del GPIOA
uint32_t *p_ClockEnableGPIOA    = (uint32_t *)0x40023830;
uint32_t *p_RegisterModerGPIOA = (uint32_t *)0x40020000;
uint32_t *p_RegisterOdrGPIOA   = (uint32_t *)0x40020014;

// Función de retraso
void delay(uint32_t count) {
    for (uint32_t i = 0; i < count; i++) {
        for (uint32_t j = 0; j < 10000; j++) {
            // Pequeña función de retraso
        }
    }
}

int main() {
    // Habilitar el reloj para el puerto GPIOA
    *p_ClockEnableGPIOA |= 0x00000001;

    // Configurar el pin del LED2 (PA5) como salida
    *p_RegisterModerGPIOA &= 0xFFFFFFF0;
    *p_RegisterModerGPIOA |= 0x00000001; // Establecer el bit 0 como salida (MODER bits 1:0 = 0b01)

    while (1) {
        // Encender el LED2 (PA5)
        *p_RegisterOdrGPIOA |= 0x00000020; // Establecer el bit 5 para encender el LED

        delay(500000); // Retraso

        // Apagar el LED2 (PA5)
        *p_RegisterOdrGPIOA &= ~0x00000020; // Establecer el bit 5 en 0 para apagar el LED

        delay(500000); // Retraso
    }

    return 0;
}

